<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="13.0.2.2">
<procedure name="main">
<interface/>
<body>
<l>* dev_open_file_dialog ('read_image', 'dir', 'default', Selection)</l>
<l>* file_name:= Selection + '/'</l>
<l> file_name:='E:/cong viec 09 03 2020/2019.03.23/2019.03.23/'</l>
<l> file_name:='E:/cong viec 09 03 2020/C/C/'</l>
<l>file_name_0:= 'HP_FCI_THA1_Pos1_B1'</l>
<l>file_name_1:= 'HP_FCI_THA1_Pos1_B2'</l>
<l>file_name_2:= 'HP_FCI_THA1_Pos1_B3'</l>
<l>file_name_3:= 'HP_FCI_THA1_Pos4_B1'</l>
<l>file_name_4:= 'HP_FCI_THA1_Pos4_B2'</l>
<l>file_name_5:= 'HP_FCI_THA1_Pos4_B3'</l>
<c></c>
<l>file_names.at(0):= file_name_0</l>
<l>file_names.at(1):= file_name_1</l>
<l>file_names.at(2):= file_name_2</l>
<c></c>
<c></c>
<l>first_file:= 2720816934</l>
<l>end_file:= 2720816990</l>
<l>Gauss_sig1:= 11</l>
<l>Thres_sub_1:=50</l>
<c></c>
<l>max_length1:= 7000</l>
<l>min_lenght1:= 3000</l>
<l>select_big_min:= 1200</l>
<l>select_big_max:= 1800</l>
<l>crop_plus_big:= 250</l>
<l>Thres_min_2:= 0</l>
<l>Thres_max_2:= 65</l>
<l>min_area_remove:= 15000</l>
<l>max_area_remove:= 30000</l>
<l>min_inner_remove:= 50</l>
<l>max_inner_remove:= 80</l>
<l>closing_area_remove:= 11</l>
<c></c>
<l>thres_min_top_remove:= 0</l>
<l>thres_max_top_remove:= 70</l>
<c></c>
<l>min_width_encap_select:= 800</l>
<l>max_width_encap_select:= 2048</l>
<c></c>
<l>min_height_encap_select:= 0.4*crop_plus_big</l>
<l>max_height_encap_select:= crop_plus_big</l>
<c></c>
<l>height_opening_remove_top:=21</l>
<l>width_opening_remove_top:=21</l>
<c></c>
<l>bias_min_cut:=5</l>
<l>bias_max_row:=10</l>
<c>                    </c>
<l>for i:=first_file to end_file by 1</l>
<c>    </c>
<l>    path_0:= file_name + i + '/' + file_name_0 + '.bmp'</l>
<l>    path_1:= file_name + i + '/' + file_name_1 + '.bmp'</l>
<l>    path_2:= file_name + i + '/' + file_name_2 + '.bmp'  </l>
<c>        </c>
<l>    read_image (Image.at(0), path_0)</l>
<c>    </c>
<c>   </c>
<l>    read_image (Image.at(1), path_1)</l>
<l>    read_image (Image.at(2), path_2)</l>
<l>    threshold (Image.at(1), Region, 148, 255)</l>
<l>    opening (Region, Region, RegionOpening1)</l>
<l>    connection (RegionOpening1, Connection)</l>
<l>    select_shape (Connection, SelectedRegions3, 'area', 'and', 1000000, 2000000)</l>
<l>    boundary (SelectedRegions3, RegionBorder, 'inner')</l>
<l>*     gen_contour_region_xld (SelectedRegions3, Contours2, 'border')</l>
<l>    get_region_points (RegionBorder, Rows1, Columns1)</l>
<c></c>
<c></c>
<l>       for g:=0 to Image.length()-1 by 1</l>
<l>           gauss_filter (Image.at(g), Image.at(g),5)</l>
<l>       endfor</l>
<c>     </c>
<c>     </c>
<l>*     stop()</l>
<c>    *get device location</c>
<l>*     gauss_filter (Image.at(0), ImageGauss, Gauss_sig1) </l>
<l>*     threshold_sub_pix (Image.at(0), Border, Thres_sub_1)</l>
<l>*     select_contours_xld (Border, SelectedContours, 'contour_length', min_lenght1, max_length1, -0.5, 0.5)</l>
<l>*     shape_trans_xld (SelectedContours, XLDTrans, 'rectangle1')    </l>
<l>*     count_obj (XLDTrans, Number)</l>
<c></c>
<l>*      for k:=1 to Number by 1</l>
<l>*         select_obj (XLDTrans, rec, k)</l>
<l>*         get_contour_xld (rec, Row, Col)</l>
<c>        </c>
<l>*         R:=Row[2]-Row[0]</l>
<l>*         C:=Col[1]-Col[0]</l>
<l>*         if ( R &gt; select_big_min and C &gt; select_big_min and R &lt; select_big_max and C &lt; select_big_max )</l>
<c></c>
<l>*             X_left:= Col[0]</l>
<l>*             X_right:= Col[1]</l>
<l>*             Y_left:= Row[0]</l>
<l>*             Y_right:= Row[1]</l>
<l>*         endif</l>
<c>       </c>
<l>*      endfor</l>
<c>     *end</c>
<l>    tuple_max (Rows1, Y_right)</l>
<l>    tuple_min (Rows1, Y_left)</l>
<l>    tuple_max (Columns1, X_right)</l>
<l>    tuple_min (Columns1, X_left)</l>
<c>         * Image 1 process: remove left, right region</c>
<l>         rectangle1_domain (Image.at(1), ImageReduced1,Y_left-crop_plus_big, X_left-crop_plus_big , Y_left -2, X_right+crop_plus_big)</l>
<l>         threshold (ImageReduced1, Regions, Thres_min_2, Thres_max_2)</l>
<l>         connection (Regions, ConnectedRegions1)</l>
<l>         select_shape (ConnectedRegions1, SelectedRegions1, 'area', 'and', min_area_remove/2, max_area_remove)           </l>
<l>         select_shape (SelectedRegions1, SelectedRegions2, 'inner_radius', 'and',min_inner_remove,max_inner_remove)</l>
<l>         closing_circle (SelectedRegions2, RegionClosing2,closing_area_remove)</l>
<l>*          select_obj (RegionClosing2, ObjectSelected2, 1)</l>
<l>*          select_obj (RegionClosing2, ObjectSelected3, 2)</l>
<l>*          symm_difference (ImageReduced1, ObjectSelected2, RegionDifference)</l>
<l>         difference (ImageReduced1, RegionClosing2, RegionDifference)       </l>
<c>          *end remove left, right region</c>
<c>          </c>
<c>          *Image 2 process : remove top</c>
<l>            reduce_domain (Image.at(2), RegionDifference, ImageReduced6)</l>
<l>            threshold (ImageReduced6, Region2, thres_min_top_remove, thres_max_top_remove)          </l>
<l>            opening_rectangle1 (Region2, RegionOpening, height_opening_remove_top , width_opening_remove_top)</l>
<l>           connection (RegionOpening, ConnectedRegions)</l>
<c>           </c>
<l>           select_shape (ConnectedRegions, SelectedRegions0, 'width', 'and',min_width_encap_select, max_width_encap_select)</l>
<l>           select_shape (SelectedRegions0, SelectedRegions, 'height', 'and',min_height_encap_select,max_height_encap_select)</l>
<l>           select_obj (SelectedRegions, ObjectSelected, 1)</l>
<l>           gen_rectangle1 (Rectangle, Y_left-5-2, X_left, Y_left-2, X_right)</l>
<l>           concat_obj (ObjectSelected, Rectangle, ObjectsConcat)</l>
<l>           union1(ObjectsConcat, RegionUnion)</l>
<l>           fill_up (RegionUnion, RegionFillUp)  </l>
<c></c>
<c>            </c>
<c>                </c>
<c>           * Image 2 process : get contour and crop contour </c>
<l>*                 boundary (RegionFillUp, RegionBorder, 'inner') </l>
<c>                </c>
<c></c>
<l>*                 shape_trans (RegionFillUp, fillup_convex, 'convex')</l>
<l>                get_region_contour (RegionFillUp, Rows, Columns)</l>
<l>                gen_contour_region_xld (RegionFillUp, regionContours, 'center')                                    </l>
<l>                tuple_min (Rows,min_row)</l>
<l>                tuple_max(Rows,max_row)</l>
<l>                tuple_min(Columns,min_col)</l>
<l>                tuple_max(Columns,max_col)</l>
<l>                tuple_mean (Rows, Mean_row)</l>
<l>                min_big_row:=Y_left</l>
<l>                min_big_col:=X_left</l>
<l>                max_big_row:=Y_right</l>
<l>                max_big_col:=X_right</l>
<l>                 Row_crop:=Mean_row</l>
<c>                 *-(Mean_row-Row[0])/2</c>
<c>                 * left remove</c>
<c>                 </c>
<c></c>
<l>                  crop_contours_xld (regionContours, CroppedContours_left,Mean_row,min_col, min_big_row, min_big_col, 'false')</l>
<l>                  crop_contours_xld (regionContours, CroppedContours_right,Mean_row,max_big_col, max_big_row, max_col, 'false')</l>
<c>                 </c>
<c>                </c>
<l>                   select_contours_xld (CroppedContours_left, CroppedContours_left, 'open', 100, 500, -0.5, 0.5)</l>
<l>                   select_obj (CroppedContours_left, CroppedContours_left, 1)</l>
<c>                  * crop final contour to get 3 point</c>
<l>                   get_contour_xld (CroppedContours_left, Row1, Col1)</l>
<l>                    tuple_max(Col1,Sort_max_Col)</l>
<l>                    tuple_max(Row1,Sort_max_Row)</l>
<l>                    tuple_find_last (Row1,Sort_max_Row-10,index)</l>
<l>                    tuple_last_n (Row1, index, cut_row)</l>
<l>                    tuple_last_n (Col1, index, cut_col)</l>
<l>                    tuple_max(cut_col,max_cut_col)</l>
<c>                    </c>
<l>                    gen_rectangle1 (Rectangle1, Mean_row, min_col, min_big_row, max_cut_col-5)</l>
<l>                    reduce_domain (RegionFillUp, Rectangle1, ImageReduced7)</l>
<l>*                     closing_circle (ImageReduced7, ImageReduced7, 3.5)</l>
<l>                    gen_contour_region_xld (ImageReduced7, Contours, 'border')</l>
<l>                    select_contours_xld (Contours, SelectedContours1, 'contour_length',20, 500, -0.5, 0.5)</l>
<l>                    select_obj(SelectedContours1,SelectedContours1, 1)</l>
<l>*                     smooth_contours_xld (Contours, SmoothedContours1, 3)</l>
<l>                    get_contour_xld (SelectedContours1, Row2, Col2)</l>
<c>                    *get 3 point</c>
<l>                    tuple_max (Row2, Max_row_final)</l>
<l>                    tuple_max (Col2, Max_col_final)</l>
<l>                    Final_row:=[Y_left,Max_row_final,Y_left]</l>
<l>*                     Final_row[0]:=Y_left</l>
<l>                    Final_col:=[X_left,Max_col_final,Max_col_final]</l>
<c>                    </c>
<l>*                     Final_row[1]:=Max_row_final</l>
<l>*                     Final_col[1]:=Max_col_final</l>
<c>                    </c>
<l>*                     Final_row[2]:=Y_left</l>
<l>*                     Final_col[2]:=Max_col_final</l>
<c>                    </c>
<l>                    gen_region_polygon_filled(tri_region_left, Final_row, Final_col)                                                          </l>
<c>                   *end left remove</c>
<c>                   </c>
<c>                   *right remove</c>
<l>                   select_contours_xld (CroppedContours_right, CroppedContours_right, 'open', 30, 500, -0.5, 0.5)</l>
<l>                   select_obj (CroppedContours_right, CroppedContours_right, 1)</l>
<c>                  * crop final contour to get 3 point</c>
<l>                   get_contour_xld (CroppedContours_right, Row_right1, Col_right1)</l>
<l>                    tuple_inverse (Row_right1, Row_right1)</l>
<l>                    tuple_inverse (Col_right1, Col_right1)</l>
<l>                    tuple_max(Col_right1,Sort_max_Col)</l>
<l>                    tuple_max(Row_right1,Sort_max_Row)</l>
<c></c>
<l>                    tuple_find_last (Row_right1,Sort_max_Row-bias_max_row,index)</l>
<l>                    tuple_last_n (Row_right1, index, cut_row)</l>
<l>                    tuple_last_n (Col_right1, index, cut_col)</l>
<l>*                     tuple_max(cut_col,max_cut_col)</l>
<l>                    tuple_min(cut_col,min_cut_col)</l>
<l>                    gen_rectangle1 (Rectangle2, Mean_row, min_cut_col+bias_min_cut, min_big_row, Sort_max_Col)</l>
<c>                    </c>
<l>                    reduce_domain (RegionFillUp, Rectangle2, small_crop_right_region)</l>
<l>                    closing_circle (small_crop_right_region, small_crop_right_region, 3.5)</l>
<l>                    gen_contour_region_xld (small_crop_right_region, Contours_right, 'border')</l>
<l>                    select_contours_xld (Contours_right, SelectedContours_right, 'contour_length',20, 3000, -0.5, 0.5)</l>
<l>                    select_obj(SelectedContours_right,SelectedContours_right, 1)</l>
<l>                    get_contour_xld (SelectedContours_right, Row2_right, Col2_right)</l>
<c></c>
<c>                    *get 3 point</c>
<l>                    tuple_max (Row2_right, Max_row_final)</l>
<l>                    tuple_min (Col2_right, min_col_final)</l>
<l>                    Final_row:=[Y_right, Max_row_final,Y_right]</l>
<l>                    Final_col:=[X_right,min_col_final,min_col_final]</l>
<c>                    </c>
<l>*                     Final_row[1]:=Max_row_final</l>
<l>*                     Final_col[1]:=min_col_final</l>
<c>                    </c>
<l>*                     Final_row[2]:=Y_right</l>
<l>*                     Final_col[2]:=min_col_final</l>
<c>                    </c>
<l>                    gen_region_polygon_filled(tri_region_right, Final_row, Final_col)</l>
<c>                  *end right remove</c>
<c>                    </c>
<c>                    * get final region</c>
<l>                    difference (RegionFillUp, tri_region_left, RegionDifference2)</l>
<l>                    difference (RegionDifference2, tri_region_right, RegionDifference3)</l>
<c>                    </c>
<l>                    gen_contour_region_xld (RegionDifference3, Contours1, 'border')</l>
<l>                    select_contours_xld (Contours1, Contours1, 'contour_length', 1000, 100000, -0.5, 0.5)</l>
<l>                    select_obj(Contours1, Contours1, 1)</l>
<l>                    smooth_contours_xld (Contours1, Contours1,21)</l>
<l>                    dev_clear_window ()</l>
<l>                     dev_display(Image.at(2))</l>
<l>                    dev_display(Contours1)</l>
<c></c>
<l>stop()</l>
<l>endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
